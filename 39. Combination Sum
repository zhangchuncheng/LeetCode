39. Combination Sum

Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.
The same repeated number may be chosen from candidates unlimited number of times.
Note:
All numbers (including target) will be positive integers.The solution set must not contain duplicate combinations.
Example 1:
Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
https://leetcode.com/problems/combination-sum/description/

class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> outer = new ArrayList<List<Integer>>();
        dfs(new ArrayList<Integer>(), outer, candidates, target, 0);
        return outer;
    }
    
    private void dfs(List<Integer> inner, List<List<Integer>> outer, int[] candidate, int target, int start) {
        if (target < 0) {
            return;
        } else if (target == 0) {
            outer.add(new ArrayList<Integer>(inner));
        } else {
            for (int i = start; i < candidate.length; i++) {
                inner.add(candidate[i]);
                dfs(inner, outer, candidate, target - candidate[i], i);
                inner.remove(inner.size() - 1);
            }
        }
    }
}

