794. Valid Tic-Tac-Toe State

A Tic-Tac-Toe board is given as a string array board. Return True if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.

The board is a 3 x 3 array, and consists of characters “ “, “X”, and “O”.  The “ “ character represents an empty square.

Here are the rules of Tic-Tac-Toe:

Players take turns placing characters into empty squares (“ “).
The first player always places “X” characters, while the second player always places “O” characters.
“X” and “O” characters are always placed into empty squares, never filled ones.
The game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal.
The game also ends if all squares are non-empty.
No more moves can be played if the game is over.
Example 1:
Input: board = [“O  “, “   “, “   “]
Output: false
Explanation: The first player always plays “X”.

Example 2:
Input: board = [“XOX”, “ X “, “   “]
Output: false
Explanation: Players take turns making moves.

Example 3:
Input: board = [“XXX”, “   “, “OOO”]
Output: false

Example 4:
Input: board = [“XOX”, “O O”, “XOX”]
Output: true
Note:

board is a length-3 array of strings, where each string board[I] has length 3.
Each board[I][j] is a character in the set {“ “, “X”, “O”}.

https://leetcode.com/problems/valid-tic-tac-toe-state/description/

/*  
此题猛一看会觉得是DFS或BFS，从一个空气盘开始进行搜索，查看是否能够搜索到需要的状态，其实有更巧妙的解法。
首先，对弈一个棋盘的状态，X的数目只可能比O的数目多1，或者两者相等，除此之外的可以排除。
其次，当X的数目比O的数目多1时，说明最后一步时X落子，那么O不可能此时在盘面上获胜，故如果发现win（'O'）就返回false
类似的，当X的数目与O的数目相等时，说明最后一步时O落子，那么X不可能此时在盘面上获胜，故如果发现win('X')就返回false
至于其他的情况，不管两边棋子怎么摆放，都是可能的。
*/
class Solution {
public:
    bool validTicTacToe(vector<string>& board) {
        int O=0;
        int X=0;
        for (int i=0; i<3; i++)
            for(int j=0; j<3; j++) {
                if(board[i][j] == 'O')
                    O++;
                if(board[i][j] == 'X')
                    X++;
            }
        if(!(X==O || X-O==1)) return false;
        if(X==O && win(board, 'X')) return false;
        if(X-O==1 && win(board, 'O')) return false;
        return true;
    }
    
    bool win(vector<string>& board, char ch) {
        for(int i=0; i<3; i++)
            if(board[i][0] == ch && board[i][1] == ch && board[i][2] == ch)
                return true;
        for(int j=0; j<3; j++)
            if(board[0][j] == ch && board[1][j] == ch && board[2][j] == ch)
                return true;
        if(board[0][0] == ch && board[1][1] == ch && board[2][2] == ch)
            return true;
        if(board[2][0] == ch && board[1][1] == ch && board[0][2] == ch)
            return true;
        return false;
        
    }
};
