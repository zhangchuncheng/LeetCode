123. Best Time to Buy and Sell Stock III

Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

Example 1:

Input: [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
             Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are
             engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/description/

class Solution {
    public int maxProfit(int[] prices) {
        if (prices == null || prices.length < 2) {
            return 0;
        }
        int[] left = new int[prices.length + 1];
        int[] rigth = new int[prices.length + 1];
        int sum = 0;
        int diff[] = new int[prices.length];
        for (int i = 1; i < diff.length; i++) {
            diff[i] = prices[i] - prices[i - 1];
        }
        for (int i = 2; i < left.length; i++) {
            left[i] = Math.max(diff[i - 1] + sum, left[i - 1]);
            sum = Math.max(0, sum + diff[i - 1]);
        }
        sum = 0;
        for (int i = rigth.length - 3; i >= 0; i--) {
            rigth[i] = Math.max(diff[i + 1] + sum, rigth[i + 1]);
            sum = Math.max(0, sum + diff[i + 1]);
        }
        sum = 0;
        for (int i = rigth.length - 1; i >= 0; i--) {
            if (left[i] + rigth[i] > sum) {
                sum = left[i] + rigth[i];
            }
        }
        return sum;
    }
}
